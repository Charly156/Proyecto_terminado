# -*- coding: utf-8 -*-
"""PropuestaRegresion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uOaeGnKV4ZtnAb6_OSX0Pt4vGWalyW__
"""

#Importar librerías
import numpy as np
import pandas as pd
import seaborn as sns
import random
import math
import matplotlib.pyplot as plt

def fx(x, angle, sigma):
    tangent = math.tan(np.deg2rad(angle))
    y = abs(tangent*x+np.random.normal(0.0, sigma))
    return y

#Leer archivos
df_general = pd.read_excel('tabular_data_general.xlsx', index_col=0)
df_maternidad = pd.read_excel('tabular_data_maternidad.xlsx')
df_docentes = pd.read_excel('tabular_data_docentes.xlsx')

angle = 45
sigma = 5

#Columna de basura por sensor con error
df_general['basura']=df_general.apply(lambda row:fx(row['total_visits'],angle,sigma),axis=1)
df_maternidad['basura']=df_maternidad.apply(lambda row:fx(row['total_visits'],angle,sigma),axis=1)
df_docentes['basura']=df_docentes.apply(lambda row:fx(row['total_visits'],angle,sigma),axis=1)

#Columna de basura por sensor sin error
df_general['basura_0']=fx(df_general['total_visits'],angle,0)
df_maternidad['basura_0']=fx(df_maternidad['total_visits'],angle,0)
df_docentes['basura_0']=fx(df_docentes['total_visits'],angle,0)

df_general[['total_visits','basura','basura_0']].tail()

#Regresión general
plt.scatter(df_general["total_visits"], df_general["basura"])
plt.plot(df_general["total_visits"], df_general["basura_0"], color="green")
plt.show()

#Regresión maternidad
plt.scatter(df_maternidad["total_visits"], df_maternidad["basura"])
plt.plot(df_maternidad["total_visits"], df_maternidad["basura_0"], color="green")
plt.show()

#Regresión docentes
plt.scatter(df_docentes["total_visits"], df_docentes["basura"])
plt.plot(df_docentes["total_visits"], df_docentes["basura_0"], color="green")
plt.show()

#Extraer Excel
df_general.to_excel("general_negocio.xlsx")
df_maternidad.to_excel("maternidad_negocio.xlsx")
df_docentes.to_excel("docentes_negocio.xlsx")

"""#Regresión lineal simple

###General
"""

#Declarar variable dependiente e independiente
vars_indep=df_general[['total_visits']]
var_dep=df_general['basura']

#Generar el modelo
from sklearn.linear_model import LinearRegression
model=LinearRegression()

#Ajuste del modelo
model.fit(X=vars_indep,y=var_dep)

#Diccionario del modelo
model.__dict__

"""Función lineal:
y = 0.9429181x + 2.327829968536701
"""

y_pred=model.predict(X=df_general[['total_visits']])
y_pred

df_general.insert(3,'basura_pred',y_pred)
df_general.head()

#Visualizar el real contra la línea recta de las predicciones del modelo lineal
sns.scatterplot(x="total_visits",y="basura",color="blue",data=df_general)
sns.scatterplot(x="total_visits",y="basura_pred",color="red",data=df_general)
sns.lineplot(x="total_visits",y="basura_pred",color="red",data=df_general)

#Coeficiente de determinación (r^2)
coef_Deter=model.score(X=vars_indep,y=var_dep)
coef_Deter

#Coeficiente de correlación (r)
coef_Correl=np.sqrt(coef_Deter)
coef_Correl

"""###Maternidad"""

#Declarar variable dependiente e independiente
vars_indep=df_maternidad[['total_visits']]
var_dep=df_maternidad['basura']

#Generar el modelo
from sklearn.linear_model import LinearRegression
model=LinearRegression()

#Ajuste del modelo
model.fit(X=vars_indep,y=var_dep)

#Diccionario del modelo
model.__dict__

"""Función lineal:
y = 0.9752837x + 1.3939013922240129
"""

y_pred=model.predict(X=df_maternidad[['total_visits']])
y_pred

df_maternidad.insert(3,'basura_pred',y_pred)
df_maternidad.head()

#Visualizar el real contra la línea recta de las predicciones del modelo lineal
sns.scatterplot(x="total_visits",y="basura",color="blue",data=df_maternidad)
sns.scatterplot(x="total_visits",y="basura_pred",color="red",data=df_maternidad)
sns.lineplot(x="total_visits",y="basura_pred",color="red",data=df_maternidad)

#Coeficiente de determinación (r^2)
coef_Deter=model.score(X=vars_indep,y=var_dep)
coef_Deter

#Coeficiente de correlación (r)
coef_Correl=np.sqrt(coef_Deter)
coef_Correl

"""###Docentes"""

#Declarar variable dependiente e independiente
vars_indep=df_docentes[['total_visits']]
var_dep=df_docentes['basura']

#Generar el modelo
from sklearn.linear_model import LinearRegression
model=LinearRegression()

#Ajuste del modelo
model.fit(X=vars_indep,y=var_dep)

#Diccionario del modelo
model.__dict__

"""Función lineal:
y = 0.93145939x + 3.456503691531011
"""

y_pred=model.predict(X=df_docentes[['total_visits']])
y_pred

df_docentes.insert(3,'basura_pred',y_pred)
df_docentes.head()

#Visualizar el real contra la línea recta de las predicciones del modelo lineal
sns.scatterplot(x="total_visits",y="basura",color="blue",data=df_docentes)
sns.scatterplot(x="total_visits",y="basura_pred",color="red",data=df_docentes)
sns.lineplot(x="total_visits",y="basura_pred",color="red",data=df_docentes)

#Coeficiente de determinación (r^2)
coef_Deter=model.score(X=vars_indep,y=var_dep)
coef_Deter

#Coeficiente de correlación (r)
coef_Correl=np.sqrt(coef_Deter)
coef_Correl